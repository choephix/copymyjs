---
interface Props {
  component: string;
  namedExport?: string;
}

const { component, namedExport } = Astro.props;
---

<div class='example-container mt-6'>
  <div
    class='example-content border border-gray-700 rounded overflow-hidden bg-[#212f4d]'
    data-example={component}
    data-named-export={namedExport}
  >
  </div>
</div>

<script>
  const loadExample = async (
    container: HTMLElement,
    componentName: string,
    namedExport?: string
  ) => {
    try {
      const module = await import(`../examples/${componentName}.ts`);

      if (namedExport && module[namedExport]) {
        module[namedExport](container);
      } else if (module.default) {
        module.default(container);
      } else {
        throw new Error('No suitable export found');
      }
    } catch (error) {
      console.error('Failed to load example:', error);
      container.innerHTML = `
      <div class="p-4 bg-red-900/50 border border-red-500 rounded">
        <p class="text-red-200">Failed to load example: ${error.message}</p>
      </div>
    `;
    }
  };

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const container = entry.target.querySelector<HTMLDivElement>('.example-content');
        const componentName = container?.dataset.example;
        const namedExport = container?.dataset.namedExport;

        if (container && componentName) {
          loadExample(container, componentName, namedExport);
          observer.unobserve(entry.target);
        }
      }
    });
  });

  document.querySelectorAll('.example-container').forEach(el => {
    observer.observe(el);
  });
</script>
